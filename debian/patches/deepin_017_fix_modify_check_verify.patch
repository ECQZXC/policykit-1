Index: policykit-1/src/programs/pkexec.c
===================================================================
--- policykit-1.orig/src/programs/pkexec.c
+++ policykit-1/src/programs/pkexec.c
@@ -59,14 +59,12 @@ static gchar *command_line = NULL;
 static struct passwd *pw;
 
 #define MAX_BUF_SIZE 1024
-#define DEVELOPER_MODE_FILE "/var/lib/deepin/developer-mode/enabled"
 #define DEVELOPER_MODE_DEV_FILE "/dev/elf_verifier"
-#define DEVELOPER_MODE_ENABLE_STR "1"
 #define SECURITY_WHILTELIST_FILE "/var/lib/deepin/deepin_security_verify.whitelist"
 
-static int has_in_developer_mode();
 static int has_in_whitelist(const char *path);
 static int security_verify_check(const char *path);
+static gboolean sync_helper_dbus_get_developer_mode_state();
 
 #ifndef HAVE_CLEARENV
 extern char **environ;
@@ -428,48 +426,51 @@ validate_environment_variable (const gch
 
 
 /* ---------------------------------------------------------------------------------------------------- */
+static gboolean
+sync_helper_dbus_get_developer_mode_state()
+{
+  GDBusProxy *proxy;
+  gboolean value;
+
+  proxy = g_dbus_proxy_new_for_bus_sync(G_BUS_TYPE_SYSTEM,
+                                        G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS |
+                                            G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES,
+                                        NULL, "com.deepin.sync.Helper",
+                                        "/com/deepin/sync/Helper",
+                                        "com.deepin.sync.Helper",
+                                        NULL, NULL);
+  GError *callError = NULL;
+  GVariant *ret1 = g_dbus_proxy_call_sync(proxy,
+                                          "IsDeveloperMode",
+                                          NULL,
+                                          G_DBUS_CALL_FLAGS_NONE,
+                                          -1,
+                                          NULL,
+                                          &callError);
+  if (callError != NULL)
+  {
+    g_print("ERROR %s", callError->message);
+    g_error_free(callError);
+    return -1;
+  }
+  g_variant_get(ret1, "(b)", &value);
+  g_variant_unref(ret1);
+  return value;
+}
 
 static int
 security_verify_check(const char *path)
 {
-    if (has_in_developer_mode()) {
+    if (sync_helper_dbus_get_developer_mode_state()) {
         return 1;
     }
+
     if (access(DEVELOPER_MODE_DEV_FILE, F_OK)){
         return 1;
     }
     return has_in_whitelist(path);
 }
 
-// TODO(jouyouyun): parse json file
-static int
-has_in_developer_mode()
-{
-    int ret = 0;
-    char buf[MAX_BUF_SIZE] = {0};
-
-    FILE *fr = fopen(DEVELOPER_MODE_FILE, "r");
-    if (!fr) {
-        return ret;
-    }
-
-    while (!feof(fr)) {
-        memset(buf, 0, MAX_BUF_SIZE);
-        size_t n = fgets(buf, MAX_BUF_SIZE, fr);
-        if (n == 0) {
-            break;
-        }
-
-        if (strcmp(buf, DEVELOPER_MODE_ENABLE_STR) == 0) {
-            ret = 1;
-            break;
-        }
-    }
-
-    fclose(fr);
-    return ret;
-}
-
 static int
 has_in_whitelist(const char *path)
 {
