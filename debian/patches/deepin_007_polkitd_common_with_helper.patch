--- /dev/null
+++ b/src/polkitagent/polkitagenthelper-deepin.c
@@ -0,0 +1,727 @@
+#include <stdbool.h>
+#include <stdio.h>
+#include <string.h>
+#include <glib-2.0/glib.h>
+#include <libdeepin-authenticate.h>
+#include <pthread.h>
+#include <json-glib/json-glib.h>
+#include "polkitagenthelperprivate.h"
+#include <signal.h>
+#include <sys/types.h>
+#include <pwd.h>
+
+#define MAX_BUFF_SIZE (2048)
+
+typedef enum
+{
+    OP_CODE_START = 1,
+    OP_CODE_END,
+    OP_CODE_TOKEN,
+} helper_op_code_t;
+
+typedef struct
+{
+    helper_op_code_t op_code;
+    int auth_flags;
+    gchar token[MAX_BUFF_SIZE];
+} helper_ctrl_info_t;
+
+typedef enum
+{
+    MSG_TYPE_STATUS = 1,
+    MSG_TYPE_AUTH_INFO,
+} msg_type_t;
+
+typedef struct
+{
+    msg_type_t msg_type;
+    struct
+    {
+        int is_mfa;
+        GList *auth_flags;
+    } auth_info;
+
+    struct
+    {
+        int status_code;
+        int auth_flag;
+        char *msg;
+    } status;
+
+} helper_auth_data_t;
+
+typedef void (*auth_ctrl_cb_func)(void *userdata, helper_ctrl_info_t *hci);
+
+typedef struct
+{
+    da_proxy *da;
+    helper_ctrl_info_t *hci;
+    auth_ctrl_cb_func ac_cb;
+    pthread_t pid;
+    helper_auth_data_t *had;
+    bool successed;
+    bool exit;
+    GMainLoop *loop;
+    GList *fail_list;
+} polkit_da_obj;
+
+void helper_log(const char *format, ...)
+{
+    char *helper_log_env = getenv("HELPER_LOG");
+    if (!helper_log_env)
+    {
+        return;
+    }
+    static FILE *f = NULL;
+    char buf[MAX_BUFF_SIZE];
+    memset(buf, 0, MAX_BUFF_SIZE);
+
+    char log_path[MAX_BUFF_SIZE];
+    if (!getenv("USER_UID"))
+    {
+        return;
+    }
+
+    sprintf(log_path, "/var/run/user/%s/polkit-helper.log", getenv("USER_UID"));
+
+    if (f == NULL)
+    {
+        f = fopen(log_path, "a+");
+        if (!f)
+        {
+            return;
+        }
+    }
+
+    va_list args;
+    va_start(args, format);
+    vsprintf(buf, format, args);
+    va_end(args);
+
+    fprintf(f, "%s\n", buf);
+    fflush(f);
+}
+
+static void
+send_to_helper(const gchar *str1,
+               const gchar *str2)
+{
+    helper_log("in send_to helper: %s %s", str1 ? str1 : "", str2 ? str2 : "");
+
+    char *escaped;
+    char *tmp;
+    size_t len;
+
+    if (str1)
+    {
+        tmp = g_strdup(str1);
+        len = strlen(tmp);
+
+        escaped = g_strescape(tmp, NULL);
+        if (!str2)
+        {
+            fprintf(stdout, "%s", escaped);
+            fputc('\n', stdout);
+            fflush(stdout);
+        }
+        else
+        {
+            fprintf(stdout, "%s ", escaped);
+        }
+
+        g_free(escaped);
+        g_free(tmp);
+    }
+
+    if (str2)
+    {
+        tmp = g_strdup(str2);
+        len = strlen(tmp);
+
+        if (len > 0 && tmp[len - 1] == '\n')
+            tmp[len - 1] = '\0';
+        escaped = g_strescape(tmp, NULL);
+
+        fprintf(stdout, "%s", escaped);
+        fputc('\n', stdout);
+        fflush(stdout);
+
+        g_free(escaped);
+        g_free(tmp);
+    }
+}
+
+static void
+load_default_locale()
+{
+    char buff[MAX_BUFF_SIZE] = "\0";
+
+    FILE *f = fopen("/etc/default/locale", "r");
+    char *pos;
+
+    if (f == NULL)
+    {
+        return;
+    }
+    while (fgets(buff, 512, f) != NULL)
+    {
+        if ((pos = strchr(buff, '\n')) != NULL)
+        {
+            *pos = '\0';
+        }
+
+        pos = strchr(buff, '=');
+        if (pos == NULL || buff == pos)
+        {
+            continue;
+        }
+
+        *pos = '\0';
+
+        char *value = pos + 1;
+
+        setenv(buff, value, true);
+    }
+    fclose(f);
+}
+
+static gboolean helper_auth_data_dump(helper_auth_data_t *data, gchar **str)
+{
+    JsonObject *json = json_object_new();
+    json_object_set_int_member(json, "msg_type", data->msg_type);
+
+    if (data->msg_type == MSG_TYPE_STATUS)
+    {
+        JsonObject *status = json_object_new();
+        json_object_set_int_member(status, "status_code", data->status.status_code);
+        json_object_set_int_member(status, "auth_flag", data->status.auth_flag);
+        json_object_set_string_member(status, "msg", data->status.msg);
+
+        json_object_set_object_member(json, "status", status);
+    }
+    else if (data->msg_type == MSG_TYPE_AUTH_INFO)
+    {
+        JsonObject *auth_info = json_object_new();
+
+        json_object_set_boolean_member(auth_info, "is_mfa", data->auth_info.is_mfa);
+
+        JsonArray *auth_flags = json_array_new();
+        int list_length = g_list_length(data->auth_info.auth_flags);
+
+        for (int i = 0; i < list_length; i++)
+        {
+            json_array_add_int_element(auth_flags, GPOINTER_TO_INT(g_list_nth_data(data->auth_info.auth_flags, i)));
+        }
+        json_object_set_array_member(auth_info, "auth_flags", auth_flags);
+        json_object_set_object_member(json, "auth_info", auth_info);
+    }
+
+    JsonGenerator *g = json_generator_new();
+    JsonNode *root = json_node_new(JSON_NODE_OBJECT);
+    json_node_set_object(root, json);
+    json_generator_set_root(g, root);
+    const char *json_str = json_generator_to_data(g, NULL);
+
+    int json_length = strlen(json_str);
+    *str = (char *)malloc(json_length + 1);
+    memcpy(*str, json_str, json_length);
+    (*str)[json_length] = '\0';
+
+    json_node_unref(root);
+    g_object_unref(g);
+    json_object_unref(json);
+
+    return TRUE;
+}
+
+bool do_parser_work(helper_ctrl_info_t *hci)
+{
+    char buf[MAX_BUFF_SIZE];
+
+    if (fgets(buf, sizeof(buf), stdin) == NULL)
+        return false;
+
+    if (buf[strlen(buf) - 1] == '\n')
+    {
+        buf[strlen(buf) - 1] = '\0';
+    }
+
+    if (!strlen(buf))
+    {
+        return false;
+    }
+
+    helper_log("get input data: %s\n", buf);
+
+    GError *error = NULL;
+    JsonParser *parser = json_parser_new();
+
+    json_parser_load_from_data(parser, buf, strlen(buf), &error);
+    if (error)
+    {
+        g_object_unref(parser);
+        g_error_free(error);
+        return FALSE;
+    }
+
+    JsonNode *root = json_parser_get_root(parser);
+    JsonObject *root_obj = json_node_get_object(root);
+    hci->op_code = json_object_get_int_member(root_obj, "op_code");
+
+    hci->auth_flags = json_object_get_int_member(root_obj, "auth_flags");
+    const gchar *token_str = json_object_get_string_member(root_obj, "token");
+
+    if (token_str)
+    {
+        memcpy(hci->token, token_str, strlen(token_str));
+    }
+
+    json_node_unref(root);
+    json_object_unref(root_obj);
+    g_object_unref(parser);
+
+    return true;
+}
+
+void *parser_ctrl_info_loop(void *userdata)
+{
+    polkit_da_obj *pda = (polkit_da_obj *)userdata;
+
+    while (1)
+    {
+        if (do_parser_work(pda->hci))
+        {
+            if (pda->ac_cb)
+            {
+                pda->ac_cb(userdata, pda->hci);
+            }
+        }
+    }
+
+    return NULL;
+}
+
+void auth_ctrl_callback(void *userdata, helper_ctrl_info_t *hci)
+{
+    polkit_da_obj *pda = (polkit_da_obj *)userdata;
+
+    helper_log("parser success. CTRL: %d, FLAGS: %d\n", pda->hci->op_code, pda->hci->auth_flags);
+
+    if (pda->hci->op_code == OP_CODE_START)
+    {
+        int failNum = 0;
+        da_error *error;
+        da_session_start(pda->da, pda->hci->auth_flags, -1, &failNum, &error);
+    }
+    else if (pda->hci->op_code == OP_CODE_END)
+    {
+        int failNum = 0;
+        da_error *error;
+        da_session_end(pda->da, pda->hci->auth_flags, &failNum, &error);
+    }
+    else if (pda->hci->op_code == OP_CODE_TOKEN)
+    {
+        da_error *error;
+        da_session_set_token(pda->da, pda->hci->auth_flags, pda->hci->token, &error);
+    }
+}
+
+bool auth_limit_info_callback(void *userdata, da_limit_info *dli,
+                              int dli_num)
+{
+    polkit_da_obj *pda = (polkit_da_obj *)userdata;
+
+    for (int i = 0; i < dli_num; i++, dli++)
+    {
+        if (dli->locked)
+        {
+            pda->had->msg_type = MSG_TYPE_STATUS;
+            pda->had->status.status_code = STATUS_CODE_LOCKED;
+            pda->had->status.auth_flag = dli->flag;
+            pda->had->status.msg = "";
+
+            char *str = NULL;
+            helper_auth_data_dump(pda->had, &str);
+
+            if (str)
+            {
+                send_to_helper(str, NULL);
+                free(str);
+            }
+            else
+            {
+                helper_log("no data write");
+            }
+        }
+    }
+}
+
+bool auth_signal_status_callback(void *userdata, DA_AUTH_FLAG flag, DA_STATUS_CODE status, char *msg)
+{
+    polkit_da_obj *pda = (polkit_da_obj *)userdata;
+
+    helper_log("get msg flag: %d, status : %d, msg: %s\n", flag, status, msg);
+
+    pda->had->msg_type = MSG_TYPE_STATUS;
+    pda->had->status.status_code = status;
+    pda->had->status.auth_flag = flag;
+    pda->had->status.msg = msg;
+
+    char *str = NULL;
+    helper_auth_data_dump(pda->had, &str);
+
+    if (!pda->had->auth_info.is_mfa)
+    {
+        // sfa
+        if (status == STATUS_CODE_PROMPT && flag == AUTH_FLAG_ALL)
+        {
+            send_to_helper("PAM_PROMPT_ECHO_OFF", pda->had->status.msg);
+        }
+    }
+    else
+    {
+        // mfa
+        if (status == STATUS_CODE_PROMPT)
+        {
+            send_to_helper("PAM_PROMPT_ECHO_OFF", pda->had->status.msg);
+        }
+    }
+
+    if (status == STATUS_CODE_SUCCESS && flag == AUTH_FLAG_ALL)
+    {
+        send_to_helper("PAM_TEXT_INFO", da_success_prompt());
+
+        pda->successed = true;
+        g_main_loop_quit(pda->loop);
+    }
+    if (status == STATUS_CODE_FAILURE)
+    {
+        if (!pda->had->auth_info.is_mfa)
+        {
+            if (flag != AUTH_FLAG_ALL)
+            {
+                pda->fail_list = g_list_append(pda->fail_list, GINT_TO_POINTER(flag));
+            }
+            else
+            {
+                if (pda->fail_list)
+                {
+                    int list_length = g_list_length(pda->fail_list);
+                    int fail_type = g_list_nth_data(pda->fail_list, 0);
+
+                    for (int i = 0; i < list_length; i++)
+                    {
+                        if (GPOINTER_TO_INT(g_list_nth_data(pda->fail_list, i)) == AUTH_FLAG_PASSWORD)
+                        {
+                            fail_type = AUTH_FLAG_PASSWORD;
+                            break;
+                        }
+                    }
+
+                    char *prompt = NULL;
+                    int ret = da_get_fail_prompt(pda->da, fail_type, true, &prompt);
+                    if (!ret)
+                    {
+                        send_to_helper("PAM_ERROR_MSG", prompt);
+                        free(prompt);
+                    }
+                    else
+                    {
+                        send_to_helper("PAM_ERROR_MSG", "Verification failed");
+                    }
+                }
+                else
+                {
+                    send_to_helper("PAM_ERROR_MSG", "Unknown reason");
+                }
+
+                pda->successed = false;
+                g_main_loop_quit(pda->loop);
+            }
+        }
+        else
+        {
+            char *prompt = NULL;
+            int ret = da_get_fail_prompt(pda->da, flag, false, &prompt);
+            if (!ret)
+            {
+                send_to_helper("PAM_ERROR_MSG", prompt);
+                free(prompt);
+            }
+            else
+            {
+                send_to_helper("PAM_ERROR_MSG", "Verification failed");
+            }
+            pda->successed = false;
+            g_main_loop_quit(pda->loop);
+        }
+    }
+
+    if (str)
+    {
+        send_to_helper(str, NULL);
+        free(str);
+    }
+    else
+    {
+        helper_log("no data write");
+    }
+
+    return true;
+}
+
+static gboolean send_auth_info_to_helper(polkit_da_obj *pda)
+{
+    pda->had->msg_type = MSG_TYPE_AUTH_INFO;
+    bool is_mfa;
+    da_prop_get_is_MFA(pda->da, &is_mfa);
+
+    pda->had->auth_info.is_mfa = is_mfa;
+    pda->had->auth_info.auth_flags = NULL;
+
+    da_factor_info *dfi = NULL;
+    int factor_num = 0;
+
+    da_prop_get_factors_info(pda->da, &dfi, &factor_num);
+
+    for (int i = 0; i < factor_num; i++)
+    {
+        pda->had->auth_info.auth_flags = g_list_append(pda->had->auth_info.auth_flags, GINT_TO_POINTER(dfi[i].auth_type));
+    }
+
+    char *str = NULL;
+    helper_auth_data_dump(pda->had, &str);
+
+    if (str)
+    {
+        send_to_helper(str, NULL);
+        free(str);
+    }
+    if (dfi)
+    {
+        free(dfi);
+    }
+
+    return true;
+}
+
+static polkit_da_obj *_pda = NULL;
+
+void sig_hanlder(struct sigaction *act)
+{
+    helper_log("SIGTERM hanlder invoked");
+    if (_pda)
+    {
+        _pda->exit = true;
+        if (_pda->loop && g_main_loop_is_running(_pda->loop))
+        {
+            g_main_loop_quit(_pda->loop);
+        }
+    }
+}
+
+void helper_exit(polkit_da_obj *pda, bool result)
+{
+    da_error *errors = NULL;
+
+    int fail_num = 0;
+    if (pda)
+    {
+        da_session_end(pda->da, -1, &fail_num, &errors);
+        da_dbus_proxy_free(pda->da);
+    }
+    if (result)
+    {
+        fprintf(stdout, "SUCCESS\n");
+    }
+    else
+    {
+        fprintf(stdout, "FAIL\n");
+    }
+    flush_and_wait();
+}
+
+int main(int argc, char *argv[])
+{
+    int ret = 0;
+    da_error *errors = NULL;
+    char *cookie = NULL;
+
+    /* clear the entire environment to avoid attacks using with libraries honoring environment variables */
+    if (_polkit_clearenv() != 0)
+        goto error;
+
+    /* set a minimal environment */
+    setenv("PATH", "/usr/sbin:/usr/bin:/sbin:/bin", 1);
+    /* check that we are setuid root */
+    if (geteuid() != 0)
+    {
+        gchar *s;
+
+        fprintf(stderr, "polkit-agent-helper-deepin: needs to be setuid root\n");
+
+        /* Special-case a very common error triggered in jhbuild setups */
+        s = g_strdup_printf("Incorrect permissions on %s (needs to be setuid root)", argv[0]);
+
+        send_to_helper("PAM_ERROR_MSG", s);
+        g_free(s);
+        goto error;
+    }
+
+    if (argc != 4)
+    {
+        goto error;
+    }
+
+    load_default_locale();
+
+    char *lang = NULL;
+    if (!da_get_user_lang(argv[1], &lang)) {
+        if (lang) {
+            helper_log("set env LANG = %s", lang);
+            setenv("LANG", lang, 1);
+            free(lang);
+        }
+    }
+
+    // 注册 SIGTERM 回调
+    if (signal(SIGTERM, sig_hanlder) == SIG_ERR)
+    {
+        helper_log("registe SIGTERM ERROR");
+        goto error;
+    }
+
+    cookie = read_cookie(3, argv);
+
+    polkit_da_obj *pda = (polkit_da_obj *)malloc(sizeof(polkit_da_obj));
+    memset(pda, 0, sizeof(polkit_da_obj));
+
+    _pda = pda;
+
+    pda->had = (helper_auth_data_t *)malloc(sizeof(helper_auth_data_t));
+
+    pda->da = da_dbus_proxy_new();
+
+    if (!pda->da)
+    {
+        helper_log("da_dbus_proxy_new error \n");
+        goto error;
+    }
+
+    char *username = argv[1];
+    int flags = atoi(argv[3]);
+    struct passwd *pw = getpwnam(username);
+    if (pw)
+    {
+        char uid[10];
+        sprintf(uid, "%d", pw->pw_uid);
+        setenv("USER_UID", uid, 1);
+    }
+    da_load_user_locale(username);
+
+    // 查询是否锁定
+    da_limit_info *dali = NULL;
+    int limit_num = 0;
+
+    da_set_log_callback(pda->da, helper_log);
+
+    ret = da_get_limits(pda->da, username, &dali, &limit_num, &errors);
+    if (ret < 0)
+    {
+        helper_log("da_get_limits error \n");
+        goto error;
+    }
+
+    if (flags == -1)
+    {
+        da_prop_get_supported_flags(pda->da, &flags);
+    }
+
+    if (flags & AUTH_FLAG_PASSWORD)
+    {
+        da_limit_info *spec_limit = da_get_auth_limit_info(dali, limit_num, AUTH_FLAG_PASSWORD);
+        if (spec_limit == NULL)
+        {
+            helper_log("get limit info for password error");
+            goto error;
+        }
+
+        if (spec_limit->locked)
+        {
+            char *prompt = NULL;
+            int ret = da_get_lock_info(pda->da, username, AUTH_FLAG_PASSWORD, NULL, &prompt);
+            if (!ret)
+            {
+                send_to_helper("PAM_ERROR_MSG", prompt);
+                free(prompt);
+            }
+            goto error;
+        }
+    }
+
+    ret = da_create_authenticate(pda->da, username, flags, 3, &errors);
+    if (ret < 0)
+    {
+        helper_log("create authenticate error %s", errors->msg);
+        goto error;
+    }
+
+    pda->hci = (helper_ctrl_info_t *)malloc(sizeof(helper_ctrl_info_t));
+    pda->ac_cb = auth_ctrl_callback;
+
+    ret = pthread_create(&pda->pid, NULL, parser_ctrl_info_loop, pda);
+    if (ret < 0)
+    {
+        helper_log("pthread_create error %d\n", ret);
+        goto error;
+    }
+
+    ret = da_session_signal_connect_status(pda->da, auth_signal_status_callback, pda);
+    if (ret < 0)
+    {
+        helper_log("da_session_signal_connect_status error %d\n", ret);
+        goto error;
+    }
+
+    ret = da_signal_connect_limit_updated(pda->da, auth_limit_info_callback, pda);
+
+    send_auth_info_to_helper(pda);
+
+    if (!pda->exit)
+    {
+        pda->loop = g_main_loop_new(NULL, 0);
+
+        if (!pda->loop)
+        {
+            helper_log("main loop is NULL");
+            goto error;
+        }
+
+        g_main_loop_run(pda->loop);
+
+        g_main_loop_unref(pda->loop);
+        pda->loop = NULL;
+    }
+
+    if (!send_dbus_message(cookie, username))
+    {
+        helper_log("polkit-agent-helper-deepin: error sending D-Bus message to PolicyKit daemon\n");
+        goto error;
+    }
+
+    free(cookie);
+
+    if (pda->successed)
+    {
+        helper_exit(pda, true);
+        return 0;
+    }
+
+error:
+
+    da_error_free(errors);
+
+    helper_exit(pda, false);
+
+    return -1;
+}
\ No newline at end of file
--- a/src/polkitagent/polkitagentmarshal.list
+++ b/src/polkitagent/polkitagentmarshal.list
@@ -1 +1,3 @@
 VOID:STRING,BOOLEAN
+VOID:INT,INT,STRING
+VOID:INT,STRING
--- a/src/polkitagent/polkitagentsession.c
+++ b/src/polkitagent/polkitagentsession.c
@@ -60,6 +60,9 @@
 
 #include "polkitagentmarshal.h"
 #include "polkitagentsession.h"
+#include <json-glib/json-glib.h>
+
+#include <libdeepin-authenticate.h>
 
 static gboolean
 _show_debug (void)
@@ -122,6 +125,8 @@
   SHOW_INFO_SIGNAL,
   SHOW_ERROR_SIGNAL,
   COMPLETED_SIGNAL,
+  STATUS_SIGNAL,
+  AUTH_INFO_SIGNAL,
   LAST_SIGNAL,
 };
 
@@ -346,6 +351,34 @@
                                             G_TYPE_NONE,
                                             1,
                                             G_TYPE_BOOLEAN);
+  /**
+   * PolkitAgentSession::status:
+   * @session: A #PolkitAgentSession.
+   * @text: A string to display to the user.
+   *
+   * Emitted when there is information to be displayed to the user.
+   */
+  signals[STATUS_SIGNAL] = g_signal_new("status",
+                                        POLKIT_AGENT_TYPE_SESSION,
+                                        G_SIGNAL_RUN_LAST,
+                                        0,    /* class offset     */
+                                        NULL, /* accumulator      */
+                                        NULL, /* accumulator data */
+                                        _polkit_agent_marshal_VOID__INT_INT_STRING,
+                                        G_TYPE_NONE,
+                                        3,
+                                        G_TYPE_INT, G_TYPE_INT, G_TYPE_STRING);
+
+  signals[AUTH_INFO_SIGNAL] = g_signal_new("auth-info",
+                                           POLKIT_AGENT_TYPE_SESSION,
+                                           G_SIGNAL_RUN_LAST,
+                                           0,    /* class offset     */
+                                           NULL, /* accumulator      */
+                                           NULL, /* accumulator data */
+                                           _polkit_agent_marshal_VOID__INT_STRING,
+                                           G_TYPE_NONE,
+                                           2,
+                                           G_TYPE_INT, G_TYPE_STRING);
 }
 
 /**
@@ -456,6 +489,133 @@
     }
 }
 
+typedef enum
+{
+  MSG_TYPE_STATUS = 1,
+  MSG_TYPE_AUTH_INFO,
+} msg_type;
+
+typedef struct
+{
+  msg_type msg_type;
+  struct
+  {
+    int is_mfa;
+    GList *auth_flags;
+  } auth_info;
+
+  struct
+  {
+    int status_code;
+    int auth_flag;
+    char *msg;
+  } status;
+
+} helper_auth_data;
+
+static gboolean
+try_parse_json_msg(gchar *msg, gsize length, helper_auth_data **had)
+{
+  GError *error = NULL;
+  JsonParser *parser = json_parser_new();
+  json_parser_load_from_data(parser, msg, length, &error);
+  if (error)
+  {
+    g_object_unref(parser);
+    g_error_free(error);
+    return FALSE;
+  }
+
+  *had = (helper_auth_data *)malloc(sizeof(helper_auth_data));
+  (*had)->auth_info.auth_flags = NULL;
+  (*had)->status.msg = NULL;
+
+  JsonNode *root = json_parser_get_root(parser);
+  JsonObject *root_obj = json_node_get_object(root);
+  (*had)->msg_type = json_object_get_int_member(root_obj, "msg_type");
+
+  if ((*had)->msg_type == MSG_TYPE_STATUS)
+  {
+    // status
+    JsonObject *status_obj = json_object_get_object_member(root_obj, "status");
+    (*had)->status.status_code = (int)json_object_get_int_member(status_obj, "status_code");
+    (*had)->status.auth_flag = (int)json_object_get_int_member(status_obj, "auth_flag");
+    const gchar *msg = (char *)json_object_get_string_member(status_obj, "msg");
+    (*had)->status.msg = g_strdup(msg);
+  }
+  else if ((*had)->msg_type == MSG_TYPE_AUTH_INFO)
+  {
+    // auth_info
+    JsonObject *auth_info_obj = json_object_get_object_member(root_obj, "auth_info");
+    (*had)->auth_info.is_mfa = json_object_get_boolean_member(auth_info_obj, "is_mfa");
+    JsonArray *auth_flags_obj = json_object_get_array_member(auth_info_obj, "auth_flags");
+    int array_length = json_array_get_length(auth_flags_obj);
+
+    for (int i = 0; i < array_length; i++)
+    {
+      (*had)->auth_info.auth_flags = g_list_append((*had)->auth_info.auth_flags, GINT_TO_POINTER(json_array_get_int_element(auth_flags_obj, i)));
+    }
+  }
+  else
+  {
+    g_object_unref(parser);
+    free(*had);
+    return FALSE;
+  }
+
+  g_object_unref(parser);
+
+  return TRUE;
+}
+
+static gboolean try_deal_msg_with_json(gchar *data, gpointer user_data)
+{
+  PolkitAgentSession *session = POLKIT_AGENT_SESSION(user_data);
+  helper_auth_data *had = NULL;
+
+  gchar *compress_data = g_strcompress(data);
+  if (!try_parse_json_msg(compress_data, strlen(compress_data), &had) || !had)
+  {
+    return FALSE;
+  }
+
+  if (had->msg_type == MSG_TYPE_STATUS)
+  {
+    g_signal_emit_by_name(session, "status", had->status.status_code, had->status.auth_flag, had->status.msg);
+
+    g_free(had->status.msg);
+
+  }
+  else if (had->msg_type == MSG_TYPE_AUTH_INFO)
+  {
+
+    char flags_str[512];
+    memset(flags_str, 0, 512);
+    int offset = 0;
+
+    if (had->auth_info.auth_flags)
+    {
+      int length = g_list_length(had->auth_info.auth_flags);
+      for (int i = 0; i < length; i++)
+      {
+        sprintf(flags_str + offset, "%d,", GPOINTER_TO_INT(g_list_nth_data(had->auth_info.auth_flags, i)));
+        offset = strlen(flags_str);
+      }
+    }
+
+    if (offset && offset > 1)
+    {
+      flags_str[offset - 1] = '\0';
+    }
+    g_signal_emit_by_name(session, "auth-info", had->auth_info.is_mfa, flags_str);
+  }
+
+  free(had);
+  free(compress_data);
+
+  return TRUE;
+}
+
 static gboolean
 io_watch_have_data (GIOChannel    *channel,
                     GIOCondition   condition,
@@ -494,6 +654,11 @@
       goto out;
     }
 
+  if (try_deal_msg_with_json(line, user_data))
+  {
+    return TRUE;
+  }
+
   /* remove terminator */
   if (strlen (line) > 0 && line[strlen (line) - 1] == '\n')
     line[strlen (line) - 1] = '\0';
@@ -557,6 +722,67 @@
   return TRUE;
 }
 
+static gboolean gen_auth_ctrl_string_with_wrap(int op_code, int flags, const char *token, char **str, int *length)
+{
+  JsonObject *json = json_object_new();
+  json_object_set_int_member(json, "op_code", op_code);
+  json_object_set_int_member(json, "auth_flags", flags);
+  json_object_set_string_member(json, "token", token);
+
+  JsonGenerator *g = json_generator_new();
+  JsonNode *root = json_node_new(JSON_NODE_OBJECT);
+  json_node_set_object(root, json);
+  json_generator_set_root(g, root);
+  const char *json_str = json_generator_to_data(g, NULL);
+
+  int json_length = strlen(json_str);
+  *str = (char *)malloc(json_length + 1);
+  memcpy(*str, json_str, json_length);
+  (*str)[json_length] = '\n';
+  *length = json_length + 1;
+
+  json_node_unref(root);
+  g_object_unref(g);
+  json_object_unref(json);
+
+  return TRUE;
+}
+
+void polkit_agent_session_response_ex(PolkitAgentSession *session, int authFlags,
+                                      const gchar *response)
+{
+  g_return_if_fail(POLKIT_AGENT_IS_SESSION(session));
+  g_return_if_fail(response != NULL);
+
+  char *json_data = NULL;
+  int json_data_length = 0;
+  gen_auth_ctrl_string_with_wrap(SESSION_CTRL_SET_TOKEN, authFlags, response, &json_data, &json_data_length);
+
+  (void)g_output_stream_write_all(session->child_stdin, json_data, json_data_length, NULL, NULL, NULL);
+
+  if (json_data)
+  {
+    free(json_data);
+  }
+}
+
+void polkit_agent_session_ctrl(PolkitAgentSession *session, int flags, session_ctrl_t ctrl)
+{
+  g_return_if_fail(POLKIT_AGENT_IS_SESSION(session));
+  g_return_if_fail(ctrl == SESSION_CTRL_OPEN || ctrl == SESSION_CTRL_CLOSE);
+
+  char *json_data = NULL;
+  int json_data_length = 0;
+  gen_auth_ctrl_string_with_wrap(ctrl, flags, "", &json_data, &json_data_length);
+
+  (void)g_output_stream_write_all(session->child_stdin, json_data, json_data_length, NULL, NULL, NULL);
+
+  if (json_data)
+  {
+    free(json_data);
+  }
+}
+
 /**
  * polkit_agent_session_response:
  * @session: A #PolkitAgentSession.
@@ -569,20 +795,7 @@
 polkit_agent_session_response (PolkitAgentSession *session,
                                const gchar        *response)
 {
-  gboolean add_newline;
-  size_t response_len;
-  const char newline[] = "\n";
-
-  g_return_if_fail (POLKIT_AGENT_IS_SESSION (session));
-  g_return_if_fail (response != NULL);
-
-  response_len = strlen (response);
-
-  add_newline = (response_len == 0 || response[response_len - 1] != '\n');
-
-  (void) g_output_stream_write_all (session->child_stdin, response, response_len, NULL, NULL, NULL);
-  if (add_newline)
-    (void) g_output_stream_write_all (session->child_stdin, newline, 1, NULL, NULL, NULL);
+  polkit_agent_session_response_ex(session, -1, response);
 }
 
 /**
@@ -602,7 +815,7 @@
 {
   uid_t uid;
   GError *error;
-  gchar *helper_argv[3];
+  gchar *helper_argv[5];
   struct passwd *passwd;
   int stdin_fd = -1;
 
@@ -634,9 +847,13 @@
       goto error;
     }
 
-  helper_argv[0] = PACKAGE_PREFIX "/lib/polkit-1/polkit-agent-helper-1";
+  gchar *ex_auth = polkit_details_lookup(session->details, "exAuth");
+
+  helper_argv[0] = PACKAGE_PREFIX "/lib/polkit-1/polkit-agent-helper-deepin";
   helper_argv[1] = passwd->pw_name;
-  helper_argv[2] = NULL;
+  helper_argv[2] = session->cookie;
+  helper_argv[3] = ex_auth ? g_strdup(polkit_details_lookup(session->details, "exAuthFlags")) : g_strdup("-1");
+  helper_argv[4] = NULL;
 
   session->child_stdout = -1;
 
@@ -683,6 +900,7 @@
   return;
 
 error:
+  g_free(helper_argv[3]);
   complete_session (session, FALSE);
 }
 
--- a/src/polkitagent/polkitagentsession.h
+++ b/src/polkitagent/polkitagentsession.h
@@ -38,6 +38,13 @@
 #define POLKIT_AGENT_IS_SESSION(o)         (G_TYPE_CHECK_INSTANCE_TYPE ((o), POLKIT_AGENT_TYPE_SESSION))
 #define POLKIT_AGENT_IS_SESSION_CLASS(k)   (G_TYPE_CHECK_CLASS_TYPE ((k), POLKIT_AGENT_TYPE_SESSION))
 
+typedef enum
+{
+    SESSION_CTRL_OPEN = 1,
+    SESSION_CTRL_CLOSE,
+    SESSION_CTRL_SET_TOKEN
+} session_ctrl_t;
+
 struct _PolkitAgentSessionClass;
 typedef struct _PolkitAgentSessionClass PolkitAgentSessionClass;
 
@@ -51,6 +58,13 @@
 void                 polkit_agent_session_initiate    (PolkitAgentSession  *session);
 void                 polkit_agent_session_response    (PolkitAgentSession  *session,
                                                        const gchar         *response);
+
+void polkit_agent_session_response_ex(PolkitAgentSession *session,
+                                      int authFlags, const gchar *response);
+
+void polkit_agent_session_ctrl(PolkitAgentSession *session, int authFlags,
+                               session_ctrl_t ctrl);
+
 void                 polkit_agent_session_cancel      (PolkitAgentSession  *session);
 
 G_END_DECLS
--- a/src/polkitagent/meson.build
+++ b/src/polkitagent/meson.build
@@ -38,6 +38,7 @@
 deps = [
   expat_dep,
   gio_unix_dep,
+  json_glib_dep,
   libpolkit_gobject_dep,
 ]
 
@@ -117,3 +118,17 @@
   install: true,
   install_dir: pk_libprivdir,
 )
+
+deepin_sources = files(
+  'polkitagenthelperprivate.c',
+  'polkitagenthelper-deepin.c',
+)
+executable(
+  'polkit-agent-helper-deepin',
+  deepin_sources,
+  include_directories: top_inc,
+  dependencies: deps + [gtk2_dep, json_c_dep, json_glib_dep, openssl_dep],
+  c_args: '-D_POLKIT_COMPILATION',
+  install: true,
+  install_dir: pk_libprivdir,
+)
\ No newline at end of file
--- a/meson.build
+++ b/meson.build
@@ -134,6 +134,11 @@
 assert(cc.has_header('expat.h', dependencies: expat_dep), 'Can\'t find expat.h. Please install expat.')
 assert(cc.has_function('XML_ParserCreate', dependencies: expat_dep), 'Can\'t find expat library. Please install expat.')
 
+gtk2_dep = dependency('gtk+-2.0')
+json_c_dep = dependency('json-c')
+json_glib_dep = dependency('json-glib-1.0')
+openssl_dep = dependency('openssl')
+
 duktape_req_version = '>= 2.2.0'
 
 js_engine = get_option('js_engine')
